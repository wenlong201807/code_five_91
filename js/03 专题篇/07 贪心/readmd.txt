
1 简介

贪心算法（又称贪婪算法）是指在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，这样算法得到的是在某种意义上的局部最优解。

贪心算法不能保证每次都能找到最优解，有时候只能找到接近最优解的方案。所以求解时，要确定问题具有贪心选择性质：每一次选择的局部最优可以导致问题的整体最优。比如硬币找零问题（后面证明部分会讲）使用贪心解法则可能会得到错误的答案。

另外即使题目可以通过贪心解决，那么如何选择贪心策略也是关键，因此可能存在一种错误的贪心策略。

总的来说，贪心算法是仅考虑局部最优的算法，难点在于如何识别出是贪心问题以及贪心的策略选择。更严谨地，我们则需要证明贪心的正确性，这通常比想到并用贪心做出来更难。

贪心算法的运用非常广泛，比如哈夫曼树，Dijkstra 算法等。

2 使用场景
2.1 贪心选择的局部最优解能得到整体的最优解。 而正向思考比较困难，我们一般从反向进行思考。如果能举出反例局部最优解不能得到全局最优解那么一定不能使用贪心。

2.2贪心策略无后效性，即当前贪心选择不会影响以后的状态，只与当前状态有关。这一点其实和动态规划是一样的。我们可以将贪心算法看成是不需要回溯的动态规划。因为动态规划很多时候需要回溯以及计算好的局部最优解，通过它们得到当前的最优解。

3 证明
贪心适合求解的问题是极值的问题，并且贪心策略通常也是显而易见的那种。虽然贪心策略显而易见，但是却不一定是正确的。

比如给你一堆硬币，面值分别为 [1,3,5]，你需要找零 9 元，如果才能是的找的硬币数目最少？贪心的策略是优先取最大的，这样可以更快地缩小问题的规模。因此我们先选 5，为了凑够剩下的 4，我们需要选择 4 枚 面值为 1 的硬币。不过这显然不是最优的，我们其实可以直接选 3 枚 面值为 3 的硬币。

上面是一个错误使用贪心策略的例子。而证明贪心不可能只需要像上面一样举个反例就行了。但是想证明贪心算法是对的就很难了。也就是说贪心算法的难点在于如何知道贪心的策略是正确的。那如何证明贪心算法的正确性呢？常见的两种方法是：反证法和数学归纳法。

反证法：如果交换方案中任意两个元素，答案不会变得更好，那么可以推定目前的解已经是最优解了。

数学归纳法：先算得出边界情况的最优解，比如 F(1) ，然后再证明F(n) 都可以由 F(n-1)推导出来

贪心初版 https://github.com/azl397985856/leetcode/blob/master/thinkings/greedy.md